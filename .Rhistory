#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -23, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -23, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -40, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -35, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -32, lng=20, zoom = 7)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -32, lng=20, zoom = 4)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -32, lng=24, zoom = 6)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -30, lng=24, zoom = 6)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -30, lng=24, zoom = 5)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -31, lng=24, zoom = 5)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$bins]]
})
observe({
leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
})
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5) %>% addRasterImage(df_filtered())
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered())
})
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
))
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5) %>% addRasterImage(df_filtered())
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered())
})
options = list(height = 500)
}
<<<<<<< HEAD
monthly_temp <- function(x, y, z, aa){
fs <- dir(x, pattern = paste0(y, "_", z, ."*\\.tif"), full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
monthly_temp <- function(x, y, aa){
fs <- dir(x, pattern = y, full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
monthly_temp <- function(x, y, boundary, aa){
fs <- dir(x, pattern = y, full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2019_11.*\\.tif", SA, "2019_11_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2019_12.*\\.tif", SA, "2019_11_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2019_12.*\\.tif", SA, "2019_12_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_01.*\\.tif", SA, "2020_01_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_02.*\\.tif", SA, "2020_02_mean_temp.tif")
devtools::build()
devtools::build()
devtools::build()
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
monthly_temp <- function(x, y, boundary, aa){
fs <- dir(x, pattern = y, full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
SouthAfricaDrought::monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
devtools::install()
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
SouthAfricaDrought::monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
SouthAfricaDrought::avg_stack("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
SouthAfricaDrought::avg_stack("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
devtools::build()
devtools::install()
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
SouthAfricaDrought::avg_stack("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "*mean_temp\\.tif", full.names = TRUE)
fs
s <- fs %>% lapply(raster) %>% stack
names(s) <- c(fs[[1]], fs[[2]], fs[[3]], fs[[4]], fs[[5]])
s
names(s) <- c("Nov_2019", "Dec_2019", "Jan_2020", "Feb_2020", "March_2020")
s
plot(s)
names(s) <- c("MeanTemp_Nov_2019", "MeanTemp_Dec_2019", "MeanTemp_Jan_2020", "MeanTemp_Feb_2020", "MeanTemp_March_2020")
s
plot(s)
writeRaster(s, "SA_MODIS_Temp", format="GTiff")
devtools::document()
echo debug.log >> .gitignore $ git rm debug.log rm 'debug.log' $ git commit -m "Start ignoring debug.log"
.gitignore $ git rm debug.log rm 'debug.log' $ git commit -m "Start ignoring debug.log"
echo debug.log >> .gitignore $ git rm --cached debug.log rm 'debug.log' $ git commit -m "Start ignoring debug.log"
git reset --hard origin/master
git reset --hard origin/main
git reset origin/main
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11*\\.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11*.\\.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "*2019_11*\\.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11.*\\.tif", full.names = TRUE)
fs
s <- fs %>% lapply(raster) %>% stack
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11.*\\.tif", full.names = TRUE)
fs
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
plot(new_s)
s <- fs %>% lapply(raster) %>% lapply(.*.02) %>% stack
new_s <- crop(s, boundary) %>% .*.02
s <- fs %>% lapply(raster) %>% lapply(s[1:4], function(x){x*.02}) %>% stack
s <- fs %>% lapply(raster) %>% lapply(s[[1:4]], function(x){x*.02}) %>% stack
s <- fs %>% lapply(raster) %>% lapply(s[1:4], function(x){x*.02}) %>% stack
s <- fs %>% lapply(raster) %>% stack %>% .*.02
s <- fs %>% lapply(raster) %>% stack %>% *.02
s <- fs %>% lapply(raster) %>% stack %>% calc(., function(x) x * 0.02)
s <- fs %>% lapply(raster) %>% crop(., boundary)
s <- fs %>% lapply(raster) %>% stack %>% crop(., boundary)
s <- fs %>% lapply(raster) %>% stack
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
new_s <- crop(s, boundary) %>% calc(., function(x) x * 0.02)
plot(new_s)
new_s <- crop(s, boundary) %>% calc(., function(x) (x * 0.02)-273)
plot(new_s)
temp_zmu <- calc(x = new_s, fun = mean, na.rm = TRUE)
temp_zmu <- calc(x = new_s, fun = mean, na.rm = TRUE)
plot(temp_zmu)
devtools::build()
devtools::install()
git add/rm <file>
git add
devtools::document()
devtools::install(build_vignettes = TRUE)
devtools::document()
devtools::install(build_vignettes = TRUE)
=======
shinyApp(ui, server)
install.packages("rsconnect")
#Display final maps of drought -- times series of drought areas?
shiny_data <- noaa_class_stack
shinyApp(ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5) %>% addRasterImage(df_filtered())
})
df_filtered <- reactive({
shiny_data[[input$slider]]
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered())
})
options = list(height = 800)
})
>>>>>>> de78cf0d35406d17a84f2d5a1d80758c75b24e54
