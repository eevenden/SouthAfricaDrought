'week5_2019-12-08_2019-12-14',
'week6_2019-12-15_2019-12-21',
'week7_2019-12-22_2019-12-28',
'week8_2019-12-29_2020-01-05',
'week9_2020-01-06_2020-01-12',
'week10_2020-01-13_2020-01-19',
'week11_2020-01-20_2020-01-26',
'week12_2020-01-27_2020-02-02',
'week13_2020-02-03_2020-02-09',
'week14_2020-02-10_2020-02-16',
'week15_2020-02-17_2020-02-23',
'week16_2020-02-24_2020-03-02',
'week17_2020-03-10_2020-03-16',
'week18_2020-03-17_2020-02-23',
'week19_2020-03-24_2020-03-30',
'week20_2020-03-31_2020-04-06',
'week21_2020-04-07_2020-04-13')
names(weekly_prec) <- week_names
knitr::opts_chunk$set(
collapse = TRUE,
fig.align = "center",
comment = "#>"
)
#load necessary libraries
library(SouthAfricaDrought)
library(geospaar)
library(sf)
library(rgdal)
library(raster)
library(shiny)
library(shinydashboard)
library(leaflet)
library(ggplot2)
library(rasterVis)
library(lattice)
library(latticeExtra)
#set custom equal area projection for South Africa
afalb <- paste0("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 ", "+y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
#Load South Africa boundary and reproject to custom projection
boundary <- system.file("extdata/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought") %>%
st_read() %>%
st_transform(x = ., crs = afalb)
#Load long-term 30-yr monthly data and reproject to custom projection
lt_monthly_prec <- system.file("extdata/SA_30yr_LT_Mean_Precip.tif", package = "SouthAfricaDrought") %>%
stack() %>%
projectRaster(., crs = afalb)
#Rename according to month
names(lt_monthly_prec) <- c('Nov_87_17', 'Dec_87_17', 'Jan_88_18', 'Feb_88_18', 'March_88_18')
#Load summer 2019-2020 monthly data and reproject custom projection
monthly_prec <- system.file("extdata/SA_Chirps_Monthly_Mean_Precip.tif", package = "SouthAfricaDrought") %>%
stack() %>%
projectRaster(., crs = afalb)
#Rename layers according to their month
names(monthly_prec) <- c('Nov_2019', 'Dec_2019', 'Jan_2020', 'Feb_2020', 'March_2020')
#Load summer weekly precipitation values and reproject custom projection
weekly_prec <- system.file("extdata/SA_Chirps_Weekly_Mean_Precip.tif", package = "SouthAfricaDrought") %>%
stack() %>%
projectRaster(., crs = afalb)
#Rename precipitation layers according to the data range of each image
week_names <- c('week1_2019-10-27_2019-11-02',
'week1_2019-11-03_2019-11-09',
'week3_2019-11-10_2019-11-16',
'week2_2019-11-17_2019-11-23',
'week3_2019-11-24_2019-11-30',
'week4_2019-12-01_2019-12-07',
'week5_2019-12-08_2019-12-14',
'week6_2019-12-15_2019-12-21',
'week7_2019-12-22_2019-12-28',
'week8_2019-12-29_2020-01-05',
'week9_2020-01-06_2020-01-12',
'week10_2020-01-13_2020-01-19',
'week11_2020-01-20_2020-01-26',
'week12_2020-01-27_2020-02-02',
'week13_2020-02-03_2020-02-09',
'week14_2020-02-10_2020-02-16',
'week15_2020-02-17_2020-02-23',
'week16_2020-02-24_2020-03-02',
'week17_2020-03-10_2020-03-16',
'week18_2020-03-17_2020-02-23',
'week19_2020-03-24_2020-03-30',
'week20_2020-03-31_2020-04-06',
'week21_2020-04-07_2020-04-13')
names(weekly_prec) <- week_names
levelplot(monthly_prec,
scales=list(draw=FALSE), #get rid of axes
par.settings = viridisTheme(axis.line = list(col = "transparent")), #get rid of boundary
main = "Monthly Mean Precipitation (Nov 2019 - March 2020)", #set title
names.attr=c("Nov 2019", "Dec 2019", "Jan 2020", "Feb 2020", "Mar 2020"), #set subplot titles
colorkey=list(labels=list(cex=1, font=1), title = "mm/Day")) #alter legend labels and title
levelplot(weekly_prec,
scales=list(draw=FALSE), #get rid of axes
par.settings = viridisTheme(axis.line = list(col = "transparent")), #get rid of boundary
main = "Weekly Mean Precipitation (10/27/2019 - 04/13/20)",
names.attr=c("10/27- 11/2", "11/3-11/10", "11/11-11/16", "11/17-11/23", "11/24-11/30", "12/1-12/7",
"12/8-12/14", "12/15-12/21", "12/22-12/28", "12/29-1/5",
"1/6-1/12", "1/13-1/19", "1/20-1/26", "1/27-2/2", "2/3-2/9", "2/10-2/16", "2/17-2/23",
"2/24-3/2", "3/3-3/9", "3/10-3/16", "3/24-3/30", "3/31-4/6", "4/7-4/13"),#set title
colorkey=list(labels=list(cex=1, font=1), title = "mm/Day")) #alter legend labels and title
#Summer rainfall region is observed on the east of South Africa
lt_monthly_prec
#sets up the decile breakdown of the mean values for each month
lt_dec <- quantile(lt_monthly_prec, c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), na.rm = TRUE) %>% as.data.frame()
#Creates classification vector of the values for November
classification_values_nov <- c(-Inf, lt_dec[1, 3], 1,
lt_dec[1, 3], lt_dec[1, 5], 2,
lt_dec[1, 5], lt_dec[1, 7], 3,
lt_dec[1,7], lt_dec[1,9], 4,
lt_dec[1, 9], Inf, 5)
#Creates the matrix to be used to reclass the values stored in the above classification_values_nov vector.  The above vector is specific to the month of November as you can tell by the use of row 1 within the brackets i.e. [1,3]
decile_matrix <- matrix(classification_values_nov, ncol=3, byrow = TRUE)
#Vector of Months
names.attr=c("Nov_2019", "Dec_2019", "Jan_2020", "Feb_2020", "Mar_2020")
#Reclasses the November values using the decile reclass matrix created above, think the reclass module in Terrset
classified_november_raster <- reclassify(monthly_prec[[1]], decile_matrix)
#For Loop to automate Months
months_storage <- list()
for(i in 1:5){
classification_values <- c(-Inf, lt_dec[i, 3], 1,
lt_dec[i, 3], lt_dec[i, 5], 2,
lt_dec[i, 5], lt_dec[i, 7], 3,
lt_dec[i, 7], lt_dec[i, 9], 4,
lt_dec[i, 9], Inf, 5)
decile_matrix <- matrix(classification_values, ncol=3, byrow = TRUE)
months_storage[[i]] <- reclassify(monthly_prec[[i]], decile_matrix)
names(months_storage[[i]]) <- names.attr[i]
}
months_storage_stack <- stack(months_storage)
months_storage_stack
# Display Decile Drought results in an interactive ShinyApp
pal <- colorFactor(c('red', 'orange', 'yellow', 'green', 'blue'), levels = 1:5, na.color ="transparent") #create palette
shinyApp(ui <- fluidPage( #create embedded ShinyApp
titlePanel("Monthly Deciles Index (November, 2019 - March, 2020)"), #set page title
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Month", min = 1, max = 5, value = 1) #set interactive slider options.
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%") #make output a leaflet interactive map
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({ #create map
leaflet() %>%
addTiles() %>% #add OSM tiles as basemap
setView(lat= -29, lng=24, zoom = 5) %>% #set the map center
addRasterImage(df_filtered(), color = pal) %>% #add raster data which will change based on slider input
addLegend("bottomleft", labels= c("Decile 1", "Decile 2", "Decile 3", "Decile 4", "Decile 5"), values = c(1, 5),
colors = c('red', 'orange', 'yellow', 'green', 'blue'), opacity = .60) #add legend
})
df_filtered <- reactive({ #object for updating data display
months_storage_stack[[input$slider]] #filter data based on slider input and only keep non-NA pixels
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered(), color = pal, opacity = 0.6) #object which clears old data and loads updated data
})
options = list(height = 1500) #set height of map
})
#sets up the decile breakdown of the mean values for each month
lt_dec <- quantile(lt_monthly_prec, c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), na.rm = TRUE) %>% as.data.frame()
#Vector of Months
names.attr=c("Nov_2019", "Dec_2019", "Jan_2020", "Feb_2020", "Mar_2020")
#For Loop to reclassify Months
months_storage <- list()
for(i in 1:5){
classification_values <- c(-Inf, lt_dec[i, 3], 1, #set reclassification ranges values
lt_dec[i, 3], lt_dec[i, 5], 2,
lt_dec[i, 5], lt_dec[i, 7], 3,
lt_dec[i, 7], lt_dec[i, 9], 4,
lt_dec[i, 9], Inf, 5)
decile_matrix <- matrix(classification_values, ncol=3, byrow = TRUE) #convert to matrix
months_storage[[i]] <- reclassify(monthly_prec[[i]], decile_matrix) #store result to a list
names(months_storage[[i]]) <- names.attr[i] #name each layer
}
months_storage_stack <- stack(months_storage) #stack reclassified layers
# Display Decile Drought results in an interactive ShinyApp
pal <- colorFactor(c('red', 'orange', 'yellow', 'green', 'blue'), levels = 1:5, na.color ="transparent") #create palette
shinyApp(ui <- fluidPage( #create embedded ShinyApp
titlePanel("Monthly Deciles Index (November, 2019 - March, 2020)"), #set page title
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Month", min = 1, max = 5, value = 1) #set interactive slider options.
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%") #make output a leaflet interactive map
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({ #create map
leaflet() %>%
addTiles() %>% #add OSM tiles as basemap
setView(lat= -29, lng=24, zoom = 5) %>% #set the map center
addRasterImage(df_filtered(), color = pal) %>% #add raster data which will change based on slider input
addLegend("bottomleft", labels= c("Decile 1", "Decile 2", "Decile 3", "Decile 4", "Decile 5"), values = c(1, 5),
colors = c('red', 'orange', 'yellow', 'green', 'blue'), opacity = .60) #add legend
})
df_filtered <- reactive({ #object for updating data display
months_storage_stack[[input$slider]] #filter data based on slider input and only keep non-NA pixels
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered(), color = pal, opacity = 0.6) #object which clears old data and loads updated data
})
options = list(height = 1500) #set height of map
})
devtools::load_all()
devtools::load_all()
devtools::build()
devtools::install()
# Display Decile Index results in an interactive ShinyApp
pal <- colorFactor(c('red', 'orange', 'yellow', 'green', 'blue'), levels = 1:5, na.color ="transparent") #create palette
shinyApp(ui <- fluidPage( #create embedded ShinyApp
titlePanel("Monthly Deciles Index (November, 2019 - March, 2020)"), #set page title
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Month", min = 1, max = 5, value = 1) #set interactive slider options.
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%") #make output a leaflet interactive map
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({ #create map
leaflet() %>%
addTiles() %>% #add OSM tiles as basemap
setView(lat= -29, lng=24, zoom = 5) %>% #set the map center
addRasterImage(df_filtered(), color = pal) %>% #add raster data which will change based on slider input
addLegend("bottomleft", labels= c("Decile 1", "Decile 2", "Decile 3", "Decile 4", "Decile 5"), values = c(1, 5),
colors = c('red', 'orange', 'yellow', 'green', 'blue'), opacity = .60) #add legend
})
df_filtered <- reactive({ #object for updating data display
months_storage_stack[[input$slider]] #filter data based on slider input and only keep non-NA pixels
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered(), color = pal, opacity = 0.6) #object which clears old data and loads updated data
})
options = list(height = 3000) #set height of map
})
#sets up the decile breakdown of the mean values for each month
lt_dec <- quantile(lt_monthly_prec, c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), na.rm = TRUE) %>% as.data.frame()
#Vector of Months
names.attr=c("Nov_2019", "Dec_2019", "Jan_2020", "Feb_2020", "Mar_2020")
#For Loop to reclassify Months
months_storage <- list()
for(i in 1:5){
classification_values <- c(-Inf, lt_dec[i, 3], 1, #set reclassification ranges values
lt_dec[i, 3], lt_dec[i, 5], 2,
lt_dec[i, 5], lt_dec[i, 7], 3,
lt_dec[i, 7], lt_dec[i, 9], 4,
lt_dec[i, 9], Inf, 5)
decile_matrix <- matrix(classification_values, ncol=3, byrow = TRUE) #convert to matrix
months_storage[[i]] <- reclassify(monthly_prec[[i]], decile_matrix) #store result to a list
names(months_storage[[i]]) <- names.attr[i] #name each layer
}
months_storage_stack <- stack(months_storage) #stack reclassified layers
months_storage_stack
plot(months_storage_stack)
#load necessary libraries
library(SouthAfricaDrought)
library(geospaar)
library(sf)
library(rgdal)
library(raster)
library(shiny)
library(shinydashboard)
library(leaflet)
library(ggplot2)
library(rasterVis)
library(lattice)
library(latticeExtra)
#set custom equal area projection for South Africa
afalb <- paste0("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25 +x_0=0 ", "+y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
#Load South Africa boundary and reproject to custom projection
boundary <- system.file("extdata/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought") %>%
st_read() %>%
st_transform(x = ., crs = afalb)
#Load long-term 30-yr monthly data and reproject to custom projection
lt_monthly_prec <- system.file("extdata/SA_30yr_LT_Mean_Precip.tif", package = "SouthAfricaDrought") %>%
stack() %>%
projectRaster(., crs = afalb)
#Rename according to month
names(lt_monthly_prec) <- c('Nov_87_17', 'Dec_87_17', 'Jan_88_18', 'Feb_88_18', 'March_88_18')
#Load summer 2019-2020 monthly data and reproject custom projection
monthly_prec <- system.file("extdata/SA_Chirps_Monthly_Mean_Precip.tif", package = "SouthAfricaDrought") %>%
stack() %>%
projectRaster(., crs = afalb)
#Rename layers according to their month
names(monthly_prec) <- c('Nov_2019', 'Dec_2019', 'Jan_2020', 'Feb_2020', 'March_2020')
#Load summer weekly precipitation values and reproject custom projection
weekly_prec <- system.file("extdata/SA_Chirps_Weekly_Mean_Precip.tif", package = "SouthAfricaDrought") %>%
stack() %>%
projectRaster(., crs = afalb)
#Rename precipitation layers according to the data range of each image
week_names <- c('week1_2019-10-27_2019-11-02',
'week1_2019-11-03_2019-11-09',
'week3_2019-11-10_2019-11-16',
'week2_2019-11-17_2019-11-23',
'week3_2019-11-24_2019-11-30',
'week4_2019-12-01_2019-12-07',
'week5_2019-12-08_2019-12-14',
'week6_2019-12-15_2019-12-21',
'week7_2019-12-22_2019-12-28',
'week8_2019-12-29_2020-01-05',
'week9_2020-01-06_2020-01-12',
'week10_2020-01-13_2020-01-19',
'week11_2020-01-20_2020-01-26',
'week12_2020-01-27_2020-02-02',
'week13_2020-02-03_2020-02-09',
'week14_2020-02-10_2020-02-16',
'week15_2020-02-17_2020-02-23',
'week16_2020-02-24_2020-03-02',
'week17_2020-03-10_2020-03-16',
'week18_2020-03-17_2020-02-23',
'week19_2020-03-24_2020-03-30',
'week20_2020-03-31_2020-04-06',
'week21_2020-04-07_2020-04-13')
names(weekly_prec) <- week_names
levelplot(monthly_prec,
scales=list(draw=FALSE), #get rid of axes
par.settings = viridisTheme(axis.line = list(col = "transparent")), #get rid of boundary
main = "Monthly Mean Precipitation (Nov 2019 - March 2020)", #set title
names.attr=c("Nov 2019", "Dec 2019", "Jan 2020", "Feb 2020", "Mar 2020"), #set subplot titles
colorkey=list(labels=list(cex=1, font=1), title = "mm/Day")) #alter legend labels and title
levelplot(weekly_prec,
scales=list(draw=FALSE), #get rid of axes
par.settings = viridisTheme(axis.line = list(col = "transparent")), #get rid of boundary
main = "Weekly Mean Precipitation (10/27/2019 - 04/13/20)",
names.attr=c("10/27- 11/2", "11/3-11/10", "11/11-11/16", "11/17-11/23", "11/24-11/30", "12/1-12/7",
"12/8-12/14", "12/15-12/21", "12/22-12/28", "12/29-1/5",
"1/6-1/12", "1/13-1/19", "1/20-1/26", "1/27-2/2", "2/3-2/9", "2/10-2/16", "2/17-2/23",
"2/24-3/2", "3/3-3/9", "3/10-3/16", "3/24-3/30", "3/31-4/6", "4/7-4/13"),#set title
colorkey=list(labels=list(cex=1, font=1), title = "mm/Day")) #alter legend labels and title
#sets up the decile breakdown of the mean values for each month
lt_dec <- quantile(lt_monthly_prec, c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), na.rm = TRUE) %>% as.data.frame()
#Vector of Months
names.attr=c("Nov_2019", "Dec_2019", "Jan_2020", "Feb_2020", "Mar_2020")
#For Loop to reclassify Months
months_storage <- list()
for(i in 1:5){
classification_values <- c(-Inf, lt_dec[i, 3], 1, #set reclassification ranges values
lt_dec[i, 3], lt_dec[i, 5], 2,
lt_dec[i, 5], lt_dec[i, 7], 3,
lt_dec[i, 7], lt_dec[i, 9], 4,
lt_dec[i, 9], Inf, 5)
decile_matrix <- matrix(classification_values, ncol=3, byrow = TRUE) #convert to matrix
months_storage[[i]] <- reclassify(monthly_prec[[i]], decile_matrix) #store result to a list
names(months_storage[[i]]) <- names.attr[i] #name each layer
}
months_storage_stack <- stack(months_storage) #stack reclassified layers
months_storage_stack
result_list <- list() #create a list to store outputs
noaa_stack <- SouthAfricaDrought::noaa_drought(weekly_prec, result_list) %>% stack() #calculate the NOAA drought index
noaa_class_stack <- SouthAfricaDrought::noaa_class(noaa_stack) #reclassify the noaa_drought output to show areas of water stress
names(noaa_class_stack) <- c('Week 9', #rename layers
'Week 10',
'Week 11',
'Week 12',
'Week 13',
'Week 14',
'Week 15',
'Week 16',
'Week 17',
'Week 18',
'Week 19',
'Week 20',
'Week 21',
'Week 22',
'week 23')
# Display Decile Index results in an interactive ShinyApp
pal <- colorFactor(c('red', 'orange', 'yellow', 'green', 'blue'), levels = 1:5, na.color ="transparent") #create palette
shinyApp(ui <- fluidPage( #create embedded ShinyApp
titlePanel("Monthly Deciles Index (November, 2019 - March, 2020)"), #set page title
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Month", min = 1, max = 5, value = 1) #set interactive slider options.
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%") #make output a leaflet interactive map
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({ #create map
leaflet() %>%
addTiles() %>% #add OSM tiles as basemap
setView(lat= -29, lng=24, zoom = 5) %>% #set the map center
addRasterImage(df_filtered(), color = pal) %>% #add raster data which will change based on slider input
addLegend("bottomleft", labels= c("Decile 1", "Decile 2", "Decile 3", "Decile 4", "Decile 5"), values = c(1, 5),
colors = c('red', 'orange', 'yellow', 'green', 'blue'), opacity = .60) #add legend
})
df_filtered <- reactive({ #object for updating data display
months_storage_stack[[input$slider]] #filter data based on slider input and only keep non-NA pixels
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered(), color = pal, opacity = 0.6) #object which clears old data and loads updated data
})
options = list(height = 3000) #set height of map
})
# Display NOAA Drought results in an interactive ShinyApp
pal <- colorFactor("red", 1, na.color ="transparent") #create palette
shinyApp(ui <- fluidPage( #create embedded ShinyApp
titlePanel("Weekly NOAA Index (01/06/2020 - 04/48/2020)"), #set page title
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 0, max = 14, value = 1) #set interactive slider options.
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%") #make output a leaflet interactive map
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({ #create map
leaflet() %>%
addTiles() %>% #add OSM tiles as basemap
setView(lat= -29, lng=24, zoom = 5) %>% #set the map center
addRasterImage(df_filtered(), color = pal) %>% #add raster data which will change based on slider input
addLegend("bottomleft", labels=c("Vegetative Stress"), colors = c("red"), opacity = .60) #add legend
})
df_filtered <- reactive({ #object for updating data display
!is.na(noaa_class_stack[[input$slider]]) #filter data based on slider input and only keep non-NA pixels
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered(), color = pal, opacity = 0.6) #object which clears old data and loads updated data
})
options = list(height = 3000) #set height of map
})
# Display NOAA Drought results in an interactive ShinyApp
pal <- colorFactor("red", 1, na.color ="transparent") #create palette
shinyApp(ui <- fluidPage( #create embedded ShinyApp
titlePanel("Weekly NOAA Index (01/06/2020 - 04/48/2020)"), #set page title
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 1, max = 14, value = 1) #set interactive slider options.
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%") #make output a leaflet interactive map
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({ #create map
leaflet() %>%
addTiles() %>% #add OSM tiles as basemap
setView(lat= -29, lng=24, zoom = 5) %>% #set the map center
addRasterImage(df_filtered(), color = pal) %>% #add raster data which will change based on slider input
addLegend("bottomleft", labels=c("Vegetative Stress"), colors = c("red"), opacity = .60) #add legend
})
df_filtered <- reactive({ #object for updating data display
!is.na(noaa_class_stack[[input$slider]]) #filter data based on slider input and only keep non-NA pixels
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered(), color = pal, opacity = 0.6) #object which clears old data and loads updated data
})
options = list(height = 3000) #set height of map
})
devtools::build
devtools::build()
devtools::install()
# Display Decile Index results in an interactive ShinyApp
pal <- colorFactor(c('red', 'orange', 'yellow', 'green', 'blue'), levels = 1:5, na.color ="transparent") #create palette
shinyApp(ui <- fluidPage( #create embedded ShinyApp
titlePanel("Monthly Deciles Index (November, 2019 - March, 2020)"), #set page title
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Month", min = 1, max = 5, value = 1) #set interactive slider options.
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%") #make output a leaflet interactive map
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({ #create map
leaflet() %>%
addTiles() %>% #add OSM tiles as basemap
setView(lat= -29, lng=24, zoom = 5) %>% #set the map center
addRasterImage(df_filtered(), color = pal) %>% #add raster data which will change based on slider input
addLegend("bottomleft", labels= c("Decile 1", "Decile 2", "Decile 3", "Decile 4", "Decile 5"), values = c(1, 5),
colors = c('red', 'orange', 'yellow', 'green', 'blue'), opacity = .60) #add legend
})
df_filtered <- reactive({ #object for updating data display
months_storage_stack[[input$slider]] #filter data based on slider input and only keep non-NA pixels
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered(), color = pal, opacity = 0.6) #object which clears old data and loads updated data
})
options = list(height = 3000) #set height of map
})
devtools::load_all()
