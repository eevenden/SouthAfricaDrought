#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -23, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -23, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -40, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -35, lng=20, zoom = 8)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -32, lng=20, zoom = 7)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -32, lng=20, zoom = 4)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -32, lng=24, zoom = 6)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -30, lng=24, zoom = 6)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -30, lng=24, zoom = 5)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -31, lng=24, zoom = 5)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
#df_filtered <- reactive({
#noaa_class_stack[[input$slider]]
#})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = nlayers(noaa_class_stack), value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 1, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
#observe({
#leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
# })
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "bins", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5)
})
df_filtered <- reactive({
noaa_class_stack[[input$bins]]
})
observe({
leafletProxy(mapId = "Raster", data = df_filtered() %>% clearValues() %>% addRasterImage())
})
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
shinyApp(
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5) %>% addRasterImage(df_filtered())
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered())
})
options = list(height = 500)
})
#Display final maps of drought -- times series of drought areas?
ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
))
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5) %>% addRasterImage(df_filtered())
})
df_filtered <- reactive({
noaa_class_stack[[input$slider]]
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered())
})
options = list(height = 500)
}
shinyApp(ui, server)
install.packages("rsconnect")
#Display final maps of drought -- times series of drought areas?
shiny_data <- noaa_class_stack
shinyApp(ui <- fluidPage(
titlePanel("Weekly Raster"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "slider", label = "Week", min = 0, max = 14, value = 1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output:
leafletOutput("Raster", width = "100%")
)
)),
server <- function(input, output, session) {
output$Raster <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lat= -29, lng=24, zoom = 5) %>% addRasterImage(df_filtered())
})
df_filtered <- reactive({
shiny_data[[input$slider]]
})
observe({
leafletProxy(mapId = "Raster") %>% clearImages() %>% addRasterImage(df_filtered())
})
options = list(height = 800)
})
