usethis::use_vignette("Project_Overview")
git remote add origin https://github.com/agroimpacts/SouthAfricaDrought.git
usethis::use_data_raw()
library(devtools)
build()
install()
temp1 <- system.file("raw-data/SouthAfrica_Boundary.shp", package = "data-raw")
boundary <- st_read(dsn = fnm)
library(sf)
boundary <- st_read(dsn = fnm)
boundary <- st_read(dsn = temp1)
temp1 <- system.file("raw-data/SouthAfrica_Boundary.shp", package = "data-raw")
boundary <- st_read(dsn = temp1)
temp1
temp1 <- system.file("raw-data/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought")
temp1
temp1 <- system.file("raw-data/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought")
boundary <- st_read(dsn = temp1)
build()
install()
library(SouthAfricaDrought)
library(sf)
temp1 <- system.file("raw-data/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought")
boundary <- st_read(dsn = temp1)
library(SouthAfricaDrought)
library(sf)
temp1 <- system.file("raw-data/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought")
boundary <- st_read(dsn = temp1)
library(SouthAfricaDrought)
library(sf)
temp1 <- system.file("raw-data/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought")
boundary <- st_read(dsn = temp1)
library(geospaar)
library(rgdal)
temp1 <- system.file("data-raw/SouthAfrica_Boundary.shp", package = "SouthAfricaDrought")
boundary <- st_read(dsn = temp1)
temp1 <- system.file("data-raw", "SouthAfrica_Boundary.shp", package = "SouthAfricaDrought")
boundary <- st_read(dsn = temp1)
temp1 <- system.file("data-raw", "SouthAfrica_Boundary.shp", package = "SouthAfricaDrought", mustWork = TRUE)
library(SouthAfricaDrought)
library(geospaar)
library(sf)
library(rgdal)
temp1 <- system.file("data-raw", "SouthAfrica_Boundary.shp", package = "SouthAfricaDrought", mustWork = TRUE)
setwd("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought")
temp1 <- system.file("data-raw", "SouthAfrica_Boundary.shp", package = "SouthAfricaDrought", mustWork = TRUE)
boundary <- read_sf(dsn = "data-raw", layer = "SouthAfrica_Boundary")
boundary <- read_sf(dsn = "data-raw/", layer = "SouthAfrica_Boundary")
boundary <- read_sf(dsn = "data-raw/SouthAfrica_Boundary.shp", layer = "SouthAfrica_Boundary")
boundary <- read_sf(dsn = "~/data-raw", layer = "SouthAfrica_Boundary")
boundary <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
plot(boundary)
library(SouthAfricaDrought)
library(geospaar)
library(sf)
library(rgdal)
boundary <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
plot(boundary)
remotes::install_github("r-spatial/rgee")
#Test code
library(rgee)
remotes::install_github("r-spatial/rgee")
install.packages("jsonlite")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(mapview)
library(rgee)
library(rgee)
library(googledrive)
#Import SA boundary
boundary <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
library(sf)
#Import SA boundary
boundary <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
#Retrieve bounding box coordinates
boundary
ee_Initialize(email = 'evendene@gwmail.gwu.edu', drive = TRUE)
#Create polygon using bounding box coordinates
polygon <- ee$Geometry$Polygon(list(c(16.45189, -34.83417), c(32.94498, -34.83417), c(32.94498, -22.12503), c(16.45189, -22.12503), c(16.45189, -22.12503)))
#Import SA boundary
boundary <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
#Retrieve bounding box coordinates
boundary
ee_Initialize(email = 'evendene@gwmail.gwu.edu', drive = TRUE)
ee_install()
ee_clean_pyenv()
ee_install()
library(mapview)
library(rgee)
library(googledrive)
library(sf)
#Import SA boundary
boundary <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
#Retrieve bounding box coordinates
boundary
ee_clean_pyenv()
ee_install()
ee_Initialize(email = 'evendene@gwmail.gwu.edu', drive = TRUE)
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2020_11*.tif", full.names = TRUE)
print(fs)
fs
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2020_11.*.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "*2020_11*.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2020_11*.tif$*", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2020_11*.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11*.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11.*\\.tif", full.names = TRUE)
fs
library(raster)
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11.*\\.tif", full.names = TRUE)
l <- lapply(fs, raster)
s <- fs %>% lapply(raster) %>% stack
library(dplyr)
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11.*\\.tif", full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
S
s
b <-  b <- brick(s)
temp_zmu <- calc(x = b, fun = mean)
length(s)
b <-  b <- brick(s)
b <- brick(s)
temp_zmu <- calc(x = s, fun = mean)
plot(s)
library(sf)
boundary <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(s)
crs(boundary)
crop(x = s[[1]], y = boundary)
test <- crop(x = s[[1]], y = boundary)
plot(test)
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
plot(boundary)
test <- crop(x = s[[1]], y = boundary)
plot(test)
test <- s %>% lapply(., crop, boundary)
new_s <- crop(s, boundary)
b <- brick(new_s)
plot(b)
plot(new_s)
temp_zmu <- calc(x = s, fun = mean)
temp_zmu <- calc(x = b, fun = mean)
temp_zmu <- calc(x = new_s, fun = mean)
plot(temp_zmu)
monthly_temp <- function(x, y, z, aa){
fs <- dir(x, pattern = y+"_"z+".*\\.tif", full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
monthly_temp <- function(x, y, z, aa){
fs <- dir(x, pattern = paste0(y, "_", z, ."*\\.tif"), full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
monthly_temp <- function(x, y, aa){
fs <- dir(x, pattern = y, full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
monthly_temp <- function(x, y, boundary, aa){
fs <- dir(x, pattern = y, full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2019_11.*\\.tif", SA, "2019_11_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2019_12.*\\.tif", SA, "2019_11_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2019_12.*\\.tif", SA, "2019_12_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_01.*\\.tif", SA, "2020_01_mean_temp.tif")
monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_02.*\\.tif", SA, "2020_02_mean_temp.tif")
devtools::build()
devtools::build()
devtools::build()
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
monthly_temp <- function(x, y, boundary, aa){
fs <- dir(x, pattern = y, full.names = TRUE)
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
temp_zmu <- calc(x = new_s, fun = mean)
writeRaster(temp_zmu, filename = file.path(x, aa))
}
SouthAfricaDrought::monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
devtools::install()
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
SouthAfricaDrought::monthly_temp("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
SouthAfricaDrought::avg_stack("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
SouthAfricaDrought::avg_stack("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
devtools::build()
devtools::install()
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
SouthAfricaDrought::avg_stack("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", "2020_03.*\\.tif", SA, "2020_03_mean_temp.tif")
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "*mean_temp\\.tif", full.names = TRUE)
fs
s <- fs %>% lapply(raster) %>% stack
names(s) <- c(fs[[1]], fs[[2]], fs[[3]], fs[[4]], fs[[5]])
s
names(s) <- c("Nov_2019", "Dec_2019", "Jan_2020", "Feb_2020", "March_2020")
s
plot(s)
names(s) <- c("MeanTemp_Nov_2019", "MeanTemp_Dec_2019", "MeanTemp_Jan_2020", "MeanTemp_Feb_2020", "MeanTemp_March_2020")
s
plot(s)
writeRaster(s, "SA_MODIS_Temp", format="GTiff")
devtools::document()
echo debug.log >> .gitignore $ git rm debug.log rm 'debug.log' $ git commit -m "Start ignoring debug.log"
.gitignore $ git rm debug.log rm 'debug.log' $ git commit -m "Start ignoring debug.log"
echo debug.log >> .gitignore $ git rm --cached debug.log rm 'debug.log' $ git commit -m "Start ignoring debug.log"
git reset --hard origin/master
git reset --hard origin/main
git reset origin/main
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11*\\.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11*.\\.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "*2019_11*\\.tif", full.names = TRUE)
fs
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11.*\\.tif", full.names = TRUE)
fs
s <- fs %>% lapply(raster) %>% stack
library(SouthAfricaDrought)
library(raster)
library(sf)
library(dplyr)
SA <- read_sf(dsn = "C:/Users/Emily/Documents/Fall_2020/Geospatial_R/SouthAfricaDrought/data-raw", layer = "SouthAfrica_Boundary")
crs(boundary)
fs <- dir("C:/Users/Emily/Documents/Fall_2020/Geospatial_R/MODIS_Temp", pattern = "2019_11.*\\.tif", full.names = TRUE)
fs
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
plot(new_s)
s <- fs %>% lapply(raster) %>% lapply(.*.02) %>% stack
new_s <- crop(s, boundary) %>% .*.02
s <- fs %>% lapply(raster) %>% lapply(s[1:4], function(x){x*.02}) %>% stack
s <- fs %>% lapply(raster) %>% lapply(s[[1:4]], function(x){x*.02}) %>% stack
s <- fs %>% lapply(raster) %>% lapply(s[1:4], function(x){x*.02}) %>% stack
s <- fs %>% lapply(raster) %>% stack %>% .*.02
s <- fs %>% lapply(raster) %>% stack %>% *.02
s <- fs %>% lapply(raster) %>% stack %>% calc(., function(x) x * 0.02)
s <- fs %>% lapply(raster) %>% crop(., boundary)
s <- fs %>% lapply(raster) %>% stack %>% crop(., boundary)
s <- fs %>% lapply(raster) %>% stack
s <- fs %>% lapply(raster) %>% stack
boundary <- st_transform(boundary, crs = st_crs(s[[1]]))
new_s <- crop(s, boundary)
new_s <- crop(s, boundary) %>% calc(., function(x) x * 0.02)
plot(new_s)
new_s <- crop(s, boundary) %>% calc(., function(x) (x * 0.02)-273)
plot(new_s)
temp_zmu <- calc(x = new_s, fun = mean, na.rm = TRUE)
temp_zmu <- calc(x = new_s, fun = mean, na.rm = TRUE)
plot(temp_zmu)
devtools::build()
devtools::install()
git add/rm <file>
git add
devtools::document()
devtools::install(build_vignettes = TRUE)
devtools::document()
devtools::install(build_vignettes = TRUE)
